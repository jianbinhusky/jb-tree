/**
 * This work is licensed under a Creative Commons Attribution-NonCommercial 3.0 Unported License:
 * http://creativecommons.org/licenses/by-nc/3.0/
 * For alternative conditions contact the author.
 * 
 * (c) 2010 "Robin Wenglewski <robin@wenglewski.de>"
 */
package com.freshbourne.multimap.btree;

import java.io.IOException;
import java.nio.ByteBuffer;

import com.freshbourne.io.FixLengthSerializer;
import com.freshbourne.io.RawPage;
import com.freshbourne.io.PagePointer;
import com.freshbourne.io.ResourceManager;
import com.freshbourne.io.Serializer;

/**
 * This B-Tree-Leaf stores entries by storing the keys and values in seperate pages
 * and keeping track only of the pageId and offset.
 * 
 * @author "Robin Wenglewski <robin@wenglewski.de>"
 *
 * @param <K> KeyType
 * @param <V> ValueType
 */
public class LeafNode<K extends Comparable<? super K>,V> implements Node<K,V> {
	
	private final RawPage page;
	private final Serializer<K, byte[]> keySerializer;
	private final Serializer<V, byte[]> valueSerializer;
	private final FixLengthSerializer<PagePointer, byte[]> pointerSerializer;
	private final ResourceManager resourceManager;
	
	// right now, we always store key/value pairs. If the entries are not unique,
	// it could make sense to store the key once with references to all values
	//TODO: investigate if we should do this
	private final int serializedPointerSize;
	private final int maxEntries;
	
	// counters
	private int numberOfEntries = 0;
	
	private int lastKeyPageId = -1;
	private int lastKeyPageRemainingBytes = -1;
	
	private int lastValuePageId = -1;
	private int lastValuePageRemainingBytes = -1;	
	
	//TODO: ensure that the pointerSerializer always creates the same (buffer-)size!
	LeafNode(
			RawPage page, // the LeafNodes uses this Body for storing links to the pageids & offsets
			ResourceManager rm, // where to request new pages for storage of key-values or value-values
			Serializer<K, byte[]> keySerializer, // the three Serializers can be the same object
			Serializer<V, byte[]> valueSerializer,
			FixLengthSerializer<PagePointer, byte[]> pointerSerializer){
		
		this.page = page;
		this.resourceManager = rm;
		this.keySerializer = keySerializer;
		this.valueSerializer = valueSerializer;
		this.pointerSerializer = pointerSerializer;
		
		this.serializedPointerSize = pointerSerializer.serializedLength(PagePointer.class);
		maxEntries = page.body().length / serializedPointerSize;
	}
	
	/* (non-Javadoc)
	 * @see com.freshbourne.multimap.MultiMap#add(java.lang.Object, java.lang.Object)
	 */
	@Override
	public void add(K key, V value) throws Exception {
		if(numberOfEntries == maxEntries)
			throw new NoSpaceException();
		
		byte[] keyBytes = keySerializer.serialize(key);
		byte[] valueBytes = valueSerializer.serialize(value);
		
		// make sure the generated bytes fit in a page
		if(keyBytes.length > page.body().length)
			throw new SerializationToLargeException(key);
		if(valueBytes.length > page.body().length)
			throw new SerializationToLargeException(value);
		
		
		storeKeyAndValueBytes(keyBytes, valueBytes);
	}
	
	/**
	 * @param keyBytes
	 * @param valueBytes
	 * @throws IOException 
	 */
	private void storeKeyAndValueBytes(byte[] keyBytes,
			byte[] valueBytes) throws IOException {
		RawPage keyPage;
		RawPage valuePage;
		
		if(keyBytes.length > lastKeyPageRemainingBytes){
			keyPage = resourceManager.newPage();
		}  else {
			keyPage = resourceManager.readPage(lastKeyPageId);
		}
		
		if(valueBytes.length > lastValuePageRemainingBytes){
			try{
				valuePage = resourceManager.newPage();
			} finally {
				//TODO: unfortunately, we dont have this yet.
				//if(newKeyPage != null)
					// resourceManager.removePage()
			}
		} else {
			valuePage = resourceManager.readPage(lastValuePageId);
		}
		
		DataPage keyDataPage = new DynamicDataPage(keyPage.body(), pointerSerializer);
		DataPage valueDataPage = new DynamicDataPage(valuePage.body(), pointerSerializer);
		
		// int keyPos = keyDataPage.add(keyBytes);
		
		// pagepointer, we use it different: offset is number of the value
		
		
	}

	/* (non-Javadoc)
	 * @see com.freshbourne.multimap.btree.Node#size()
	 */
	@Override
	public int size() {
		return numberOfEntries;
	}

	/* (non-Javadoc)
	 * @see com.freshbourne.multimap.MultiMap#containsKey(java.lang.Object)
	 */
	@Override
	public boolean containsKey(K key) {
		// TODO Auto-generated method stub
		return false;
	}

	/* (non-Javadoc)
	 * @see com.freshbourne.multimap.MultiMap#getFirst(java.lang.Object)
	 */
	@Override
	public V getFirst(K key) {
		// TODO Auto-generated method stub
		return null;
	}

	/* (non-Javadoc)
	 * @see com.freshbourne.multimap.MultiMap#get(java.lang.Object)
	 */
	@Override
	public V[] get(K key) {
		// TODO Auto-generated method stub
		return null;
	}


	/* (non-Javadoc)
	 * @see com.freshbourne.multimap.MultiMap#remove(java.lang.Object)
	 */
	@Override
	public V[] remove(K key) {
		// TODO Auto-generated method stub
		return null;
	}

	/* (non-Javadoc)
	 * @see com.freshbourne.multimap.MultiMap#remove(java.lang.Object, java.lang.Object)
	 */
	@Override
	public V remove(K key, V value) {
		// TODO Auto-generated method stub
		return null;
	}

	/* (non-Javadoc)
	 * @see com.freshbourne.multimap.MultiMap#clear()
	 */
	@Override
	public void clear() {
		// TODO Auto-generated method stub
		
	}

	/**
	 * @return the maximal number of Entries
	 */
	public int getMaxEntries() {
		return maxEntries;
	}

	private void storeKey(ByteBuffer b){
		
	}
	
	private void storeValue(ByteBuffer b){
		
	}
}
